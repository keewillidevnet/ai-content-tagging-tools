const express = require('express');
const { 
  metadataHeaders, 
  parseMetadataHeaders, 
  validateContentIntegrity,
  createFilter,
  generateHeaders 
} = require('../lib/formats/http-headers');

const app = express();
const PORT = 3001;

// Enable JSON parsing
app.use(express.json());

// Example 1: Basic auto-tagging for all responses
app.use(metadataHeaders({
  origin: 'human',
  author: 'Demo Server',
  license: 'MIT'
}));

// Example 2: Parse incoming metadata headers
app.use(parseMetadataHeaders());

// Example 3: Selective tagging with custom filter
const apiFilter = createFilter({
  routes: [/^\/api\//, /^\/data\//], // Only tag API routes
  contentTypes: ['application/json', 'text/plain'],
  minSize: 10 // Only tag responses larger than 10 bytes
});

app.use('/api', metadataHeaders({
  origin: 'ai',
  author: 'API Server',
  filter: apiFilter
}));

// Routes demonstrating different scenarios

// Basic human-generated content
app.get('/', (req, res) => {
  res.send('Welcome to the RFC-compliant metadata demo server!');
});

// API endpoint with AI-generated content
app.get('/api/generate', (req, res) => {
  res.json({
    message: 'This response was generated by our AI system',
    timestamp: new Date().toISOString(),
    model: 'demo-ai-v1'
  });
});

// Manual metadata setting
app.get('/custom', (req, res) => {
  res.setContentOrigin('hybrid', 'Human + GPT-4', {
    license: 'CC-BY-4.0',
    toolchain: 'Express.js + GPT-4',
    model_identifier: 'gpt-4'
  }).json({
    content: 'This content was created through human-AI collaboration',
    methodology: 'Human prompting with AI generation'
  });
});

// Content with manual metadata object
app.get('/research', (req, res) => {
  const researchData = {
    title: 'AI Content Classification Study',
    authors: ['Dr. Smith', 'Dr. Johnson'],
    findings: 'RFC-compliant tagging improves dataset quality by 95%'
  };

  // Generate headers manually for demonstration
  const headers = generateHeaders(JSON.stringify(researchData), {
    origin: 'human',
    author: 'Research Team',
    license: 'CC-BY-SA-4.0'
  });

  // Set headers manually
  Object.entries(headers).forEach(([key, value]) => {
    res.set(key, value);
  });

  res.json(researchData);
});

// Echo endpoint to show parsed metadata
app.post('/echo', (req, res) => {
  const response = {
    received_body: req.body,
    received_metadata: req.metadata ? req.metadata.toObject() : null,
    server_time: new Date().toISOString()
  };

  if (req.metadata) {
    console.log('ðŸ“¨ Received metadata:', req.metadata.toObject());
  }

  res.json(response);
});

// File upload with integrity validation
app.use('/upload', validateContentIntegrity({
  onValidationFail: (req, res) => {
    res.status(400).json({
      error: 'Content integrity validation failed',
      message: 'The uploaded content does not match the provided metadata checksum'
    });
  }
}));

app.post('/upload', (req, res) => {
  res.json({
    message: 'File uploaded and validated successfully!',
    metadata: req.metadata ? req.metadata.toObject() : null
  });
});

// Metadata inspection endpoint
app.get('/inspect', (req, res) => {
  const headers = {};
  Object.entries(req.headers).forEach(([key, value]) => {
    if (key.startsWith('x-content-')) {
      headers[key] = value;
    }
  });

  res.json({
    message: 'Header inspection endpoint',
    found_metadata_headers: headers,
    parsed_metadata: req.metadata ? req.metadata.toObject() : null,
    tip: 'Send requests with X-Content-* headers to see them parsed!'
  });
});

// Health check endpoint (no metadata)
app.use('/health', metadataHeaders({
  autoGenerate: false // Disable auto-generation for health checks
}));

app.get('/health', (req, res) => {
  res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

// Error handling middleware
app.use((error, req, res, next) => {
  console.error('Server error:', error);
  res.status(500).json({
    error: 'Internal server error',
    message: 'Something went wrong with metadata processing'
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`\nðŸš€ HTTP Metadata Middleware Demo`);
  console.log(`ðŸ“¡ Server running on http://localhost:${PORT}`);
  console.log(`\nðŸ“– Try these endpoints:`);
  console.log(`  GET  / - Basic auto-tagged response`);
  console.log(`  GET  /api/generate - AI-generated content`);
  console.log(`  GET  /custom - Manual metadata setting`);
  console.log(`  GET  /research - Manual header generation`);
  console.log(`  POST /echo - Echo with metadata parsing`);
  console.log(`  GET  /inspect - Inspect incoming headers`);
  console.log(`  GET  /health - No metadata (health check)`);
  console.log(`\nðŸ§ª Test with curl:`);
  console.log(`  curl -H "X-Content-Origin: human" -H "X-Content-Author: Test User" http://localhost:${PORT}/inspect`);
  console.log(`  curl -X POST -H "Content-Type: application/json" -d '{"test": "data"}' http://localhost:${PORT}/echo`);
  console.log(`\nðŸ’¡ All responses include RFC-compliant metadata headers!`);
});